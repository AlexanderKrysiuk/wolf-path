// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  // Production
  provider = "mysql"
  // Devlopment
  // provider = "postgresql"
  url = env("DATABASE_URL")
}

enum UserRole {
  ADMIN
  USER
}

model User {
  id            String          @id @default(cuid())
  name          String?
  email         String          @unique
  emailVerified DateTime?
  image         String?
  password      String?
  role          UserRole @default(USER)
  accounts      Account[]
  products      Product[]
  testimonials  Testimonial[]

  //Social Media Websites
  profession String?
  website String?
  facebook String?
  instagram String?
  linkedIn String?
  youtube String?
  tiktok String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
 
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
 
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
 
  @@id([provider, providerAccountId])
} 

model VerificationToken {
  id  String  @id @default(cuid())
  email String
  token String  @unique
  expires DateTime

  @@unique([email, token])
}

model PasswordResetToken {
  id String @id @default(cuid())
  email String
  token String @unique
  expires DateTime

  @@unique([email, token])
}

model Product {
  id            String   @id @default(uuid())
  title         String
  ownerID       String
  owner         User     @relation(fields: [ownerID], references: [id])
  testimonials  Testimonial[]
}

enum TestimonialStatus {
  PENDING
  ACCEPTED
}

model Testimonial {
  ID          String  @id @default(uuid())
  title       String
  description String  @db.Text
  acceptTerms Boolean
  status      TestimonialStatus @default(PENDING)
  ownerID     String
  owner       User     @relation(fields: [ownerID], references: [id])
  productID   String
  product     Product @relation(fields: [productID], references: [id])
  
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}